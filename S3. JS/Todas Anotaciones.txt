Pagina web compementaria: https://www.w3schools.com/js/default.asp

A tener en cuenta: Algunas clases no van a tener anotaciones ya que son conceptos que ya adquirí. A diferencia de las otras 2 secciones esta va a tener apuntes sueltos y no toda una expliación. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

			1. Introducción a JavaScript

1. Introducción a JavaScript

JavaScript es un lenguaje de programación interpretado, el cual puede ser ejecutado y entendido por navegadores web. Es uno de los lenguajes mas utilizados para navegadores.

Toda la interacción que tengamos con el navegador se lo considera Front-End. JavaScript posee frameworks para el front-end que facilitan y agilizan el coding de una pagina. Entre los frameworks se encuentran Angular.js (Google), Vue.js y React.js (Facebook).

JavaScript también puede ser utilizado para el back-end con el framework node.js.

El lenguaje se basa en el estándar Eggman Script y cada año se realiza una actualizacion que evoluciona el lenguaje.
-----------------------------------------------------------------------

2. Tecnologias a utilizar.

Vamos a utilizar node.js para el backend y ejecutar en tiempo real los programas que hagamos con JavaScript.
Vamos a instalar la extension de JavaScript para Visual Studio Code, Quokka.js, ESLint, Prettier - Code formatter, Bracket Pair Colorizer 2, Better Comments, Live Server y el Visual Studio IntelliCode.

Quokka.js is a developer productivity tool for rapid JavaScript / TypeScript prototyping. Runtime values are updated and displayed in your IDE next to your code, as you type.3. Diferencia entre var y let en JavaScript
-----------------------------------------------------------------------

3. Diferencia entre var y let en JavaScript

let te permite declarar variables limitando su alcance (scope) al bloque, declaración, o expresión donde se está usando. a diferencia de la palabra clave var la cual define una variable global o local en una función sin importar el ámbito del bloque. Source: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/let

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

			2. Tipos de Datos en JavaScript

Las variables declaradas como "var" en JavaScript se conocen como variables dinamicas. Esto quiere decir que en cualquier momento vamos a poder asignarle un nuevo valor a una variable previamente asignada con distinto tipo de dato. 

Symbol es un tipo de datos cuyos valores son únicos e immutables. Dichos valores pueden ser utilizados como identificadores (claves) de las propiedades de los objetos.  Cada valor del tipo Symbol tiene asociado un valor del tipo String o Undefined que sirve únicamente como descripción del símbolo. Source: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Symbol

Las clases tambien se consideran funciones en JavaScript.

Las variables Undefined son variables declaradas que no estan asociadas a ningún valor.

Null no es un tipo de dato es un tipo object.

Los arrays en JavaScript son de tipo object.

La palabra reservada var la utilizamos para declarar variables, sin embargo hoy en dia no se considera una buena práctica. Sustituyendo esta palabra tenemos las palabras reservadas let para una variable y const para una constante.
En JavaScript es posible declarar una variable sin asignarle una palabra reservada. No se recomienda ya que no es una buena práctica. Buenas prácticas son usar let y const hoy en dia.

El operador de comparación === y !== revisa los valores pero también los tipos. Ejemplo: a = 3 - c = "3" -> a==c -> true | a===c -> false.

Dentro de la clase Number podemos parsear strings a numeros.

Para que las conversiones puedan realizarse de manera correcta debemos verificar que la cadena sea un numero, para ello tenemos la herramientat IsNan que significa IsNotANumber.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

			3. Sentencias de Control en JavaScript